package ui

import (
	"dashboard/internal/config/service"
  "dashboard/internal/config/tag"
)

func pastelise(color string) string {
  return color + "33"
}

css tagColors(color string) {
  background: { pastelise(color) };
  color: { color };
}


templ serviceCard(config service.Service, tags tag.Tags) {
  <a href={config.Link}>
    <div class="service">
      <div class="service-content">
        <iconify-icon class="service-icon" icon={ config.Icon.Name } style={"color: " + config.Icon.Color + ";"}></iconify-icon>
        <div class="service-right">
          <span class="service-title">{ config.Title }</span>
          <span class="service-badges">
            for _, tagName := range config.Tags {
              {{ foundTag, err := tags.Lookup(tagName) }}
              if err == nil && foundTag != nil {
                <span class={"service-badge", tagColors(foundTag.Color)}>{ foundTag.Name }</span>
              }
            }
          </span>
        </div>
      </div>
    </div>
  </a>
}


templ serviceGroup(title string, services []*service.Service, tags tag.Tags) {
  <div class="service-group">
    <h2 class="service-group-title">{ title }</h2>
    <div class="services">
      for _, service := range services {
        @serviceCard(*service, tags)
      }
    </div>
  </div>
}


templ ServiceView(services []*service.Service, tags tag.Tags) {
  {{
    grouped := service.ByGroup(services)

  var lists []templ.Component
  // Add default group (empty group name) first
  if defaultServices, ok := grouped[service.DefaultGroup]; ok {
    lists = append(lists, serviceGroup("", defaultServices, tags))
  }
  // Add other groups
  for group, services := range grouped {
    if group != service.DefaultGroup {
      lists = append(lists, serviceGroup(string(group), services, tags))
    }
  }
  }}

  <div>
    for _, child := range lists {
      @child
    }
  </div>
}
